{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "EMPsourceDBSQL"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "empfile"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTablecountry",
						"type": "DatasetReference"
					},
					"name": "sourceCountry"
				}
			],
			"sinks": [
				{
					"name": "cachedMaxEmpID"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable_empsink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"name": "CachedCountry"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedEMPID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          maxEmpid as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'select max(empid) as maxEmpid from dbo.emp',",
				"     format: 'query') ~> EMPsourceDBSQL",
				"source(output(",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empfile",
				"source(output(",
				"          countrycode as string,",
				"          countryname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceCountry",
				"empfile keyGenerate(output(Empid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(Empid = Empid + cachedMaxEmpID#outputs()[1].maxEmpid,",
				"          Country = CachedCountry#lookup(Country).countryname) ~> derivedEMPID",
				"EMPsourceDBSQL sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          maxEmpid",
				"     )) ~> cachedMaxEmpID",
				"derivedEMPID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Empid as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Gender as string,",
				"          Country as string,",
				"          Dept as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"sourceCountry sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['countrycode'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          countrycode,",
				"          countryname",
				"     )) ~> CachedCountry"
			]
		}
	}
}